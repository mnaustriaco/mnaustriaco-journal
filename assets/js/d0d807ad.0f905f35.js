"use strict";(self.webpackChunkmizuko_journal=self.webpackChunkmizuko_journal||[]).push([[6466],{8239:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var t=o(5893),i=o(1151);const s={sidebar_position:1},a="Pomelo Modernization Initiative",r={id:"apis-doc/Pomelo Modernization/intro",title:"Pomelo Modernization Initiative",description:"Pomelo Application (Previously known as JDM Auto-Parts) is a Point of Sale application deployed on the product owner's",source:"@site/docs/apis-doc/Pomelo Modernization/intro.md",sourceDirName:"apis-doc/Pomelo Modernization",slug:"/apis-doc/Pomelo Modernization/intro",permalink:"/docs/apis-doc/Pomelo Modernization/intro",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"apiDocSidebar",previous:{title:"Pomelo Modernization",permalink:"/docs/category/pomelo-modernization-1"},next:{title:"Component Description",permalink:"/docs/apis-doc/Pomelo Modernization/system-components"}},c={},l=[{value:"Scopes and limitation",id:"scopes-and-limitation",level:2},{value:"Components",id:"components",level:2},{value:"Technologies used",id:"technologies-used",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"pomelo-modernization-initiative",children:"Pomelo Modernization Initiative"}),"\n",(0,t.jsx)(n.p,{children:"Pomelo Application (Previously known as JDM Auto-Parts) is a Point of Sale application deployed on the product owner's\r\nterminal. Said application can handle the day-to-day task of the client's needs, but the client need to market their products\r\nto the digital world."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Existing flow",src:o(3703).Z+"",width:"791",height:"573"}),"\r\n",(0,t.jsx)(n.em,{children:"Figure 1: The old system flow for transactions"})]}),"\n",(0,t.jsx)(n.h2,{id:"scopes-and-limitation",children:"Scopes and limitation"}),"\n",(0,t.jsx)(n.p,{children:"The initiative is just to provide the client an internet channel to accept transactions automatically. However, to control\r\nthe concurrent operations of local store and the digital one, stocks must be separated from each. This is part of the initial\r\nphase to ensure the modernization's effectivity."}),"\n",(0,t.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,t.jsx)(n.p,{children:"The modernization goal is fairly simple; split the point of sale functions into workable microservices:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"lookup-api:"})," will contain the product details such as name, description."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"stock-updater-svc:"})," will contain the product's actual quantity, linked by product ID from the lookup-api."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"pricing-api:"})," will contain the product price. the reason for separating it with lookup is the future plan to track the price changes in said product."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"transaction-api:"})," this component will handle the transaction flow for each product. from translating the barcodeNo, to updating the transaction database."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"storefront-ui"})," the frontend application."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Other application(s) not exclusively written for this initiative is/are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PUMA"})," - a notification ecosystem to give an update towards the frontend via websocket about the status of current transaction."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"There is no real benefit for separating the pricing-api, and lookup-api. Product changes such as description, name, and pricing can be compounded into a single\r\nservice that handles the monitoring."})}),"\n",(0,t.jsx)(n.h2,{id:"technologies-used",children:"Technologies used"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"RabbitMQ:"})," for real-time event-driven functionalities such as transaction notification, barcode translation, and stock updates. This technology was used instead of\r\ntraditional RESTful communication to take advantage of the blocking mechanism of queues.","\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"I have to admit,at the time of this writing. the blocking mechanism might not scale at large volume of transactions."})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cassandra:"})," Mainly used by ",(0,t.jsx)(n.strong,{children:"PUMA"})," notification. Cassandra is chosen over MariaDB given its write-over-read power. I had once tested its capability due to an exception\r\nthat occured in backend where it wrote over 86k rows of data within a span of few minutes without breaking. In fact, the app broke first before Cassandra."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Spring Boot 3:"})," I chose Spring Boot 3 due to its Java 17 support. I have strongly taken advantage of the ",(0,t.jsx)(n.code,{children:"Record"})," feature over the course of my coding."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MariaDB:"})," MariaDB is my default database of choice for local development, Given its open-source nature."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"StompJS for Websockets:"})," Instead of polling the backend continuously for results of any given transaction, I used WebSockets. WebSocket allow for a feature"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"React w/ Vite JS:"})," Since Create-React-App was abandoned, Vite JS looks to be a good fit to explore."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"antd:"})," a component framework I used with the frontend for faster deployment."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"NGINX:"})," NGINX was used to slim down the frontend build from almost ",(0,t.jsx)(n.code,{children:"2GB"})," to a surprisingly ",(0,t.jsx)(n.code,{children:"25MB"})," size. Apart from that, it was used in my LAN Server as a reverse-proxy."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Docker:"})," was used as containerization tool in my local. ",(0,t.jsx)(n.code,{children:"Docker Registry"}),", a self-hosted registry for my images, and ",(0,t.jsx)(n.code,{children:"Portainer"}),", a web-based UI for Docker are used.\r\nContainerization improves the deployment time with storage allocation as a tradeoff."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},3703:(e,n,o)=>{o.d(n,{Z:()=>t});const t=o.p+"assets/images/image-7c37a96321d421f82db7e828bf2e945a.png"},1151:(e,n,o)=>{o.d(n,{Z:()=>r,a:()=>a});var t=o(7294);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);