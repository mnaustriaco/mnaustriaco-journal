"use strict";(self.webpackChunkmizuko_journal=self.webpackChunkmizuko_journal||[]).push([[1537],{614:(e,i,o)=>{o.r(i),o.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var t=o(5893),n=o(1151);const s={sidebar_position:1},r="Introduction",a={id:"apis-doc/file-storage-api/file-storage-api-intro",title:"Introduction",description:"file-storage-api is a RESTful API that will interface with your APIs to your File Storage.",source:"@site/docs/apis-doc/file-storage-api/file-storage-api-intro.md",sourceDirName:"apis-doc/file-storage-api",slug:"/apis-doc/file-storage-api/file-storage-api-intro",permalink:"/docs/apis-doc/file-storage-api/file-storage-api-intro",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"apiDocSidebar",previous:{title:"Project FiSto",permalink:"/docs/category/project-fisto-1"},next:{title:"Setup & Configuration",permalink:"/docs/apis-doc/file-storage-api/file-storage-api-config"}},c={},l=[{value:"Tech used:",id:"tech-used",level:3},{value:"Problem Description",id:"problem-description",level:3},{value:"Solution",id:"solution",level:3},{value:"Notes to consider:",id:"notes-to-consider",level:3}];function d(e){const i={admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"file-storage-api"})," is a RESTful API that will interface with your APIs to your ",(0,t.jsx)(i.code,{children:"File Storage"}),"."]}),"\n",(0,t.jsx)(i.p,{children:"Refer to the diagram below:"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"file-storage-api Diagram",src:o(6368).Z+"",width:"900",height:"703"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.em,{children:"In the above illustration, the file-storage-api can serve as a central storage for the microservices."})}),"\n",(0,t.jsx)(i.h3,{id:"tech-used",children:"Tech used:"}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"file-storage-api"})," uses the ff. storage:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"MariaDB"})," - for File ID lookup"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"Data Storage"})," - currently using local storage, for storing the files."]}),"\n"]}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,t.jsx)(i.p,{children:"If you have an large application with the ff. features:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"A consumer-facing application that saves customer information, including their profile photo. (Who doesn't like a site with profile photo?)"}),"\n",(0,t.jsx)(i.li,{children:"A client-facing application (in this case, the product seller) that uploads product details, including product pictures."}),"\n",(0,t.jsx)(i.li,{children:"An incident-tracking application, where customer can upload files for better root cause analysis."}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["You may try to write each application APIs their own file saving capabilities, but ",(0,t.jsx)(i.code,{children:"Separation of Concerns"})," dictates that each application should focus on their designated roles."]}),"\n",(0,t.jsx)(i.h3,{id:"solution",children:"Solution"}),"\n",(0,t.jsxs)(i.p,{children:["Design your client-specific APIs to only reference a ",(0,t.jsx)(i.code,{children:"locationPath"})," of the upload file. this locationPath is a ",(0,t.jsx)(i.code,{children:"fileId"})," returned by the ",(0,t.jsx)(i.code,{children:"file-storage-api"}),"."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:'{\r\n    "customerId": "jdoe",\r\n    "custPhoto": "file-id.jpg" // file-id format is [id].[extension]\r\n}\n'})}),"\n",(0,t.jsx)(i.p,{children:"Depending on your use case, you may try the ff. approach:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"via uploading to frontend"})," - this is the faster way, just upload the document, get the ",(0,t.jsx)(i.code,{children:"file-id"})," and then submit it to your respective APIs."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsxs)(i.strong,{children:["using ",(0,t.jsx)(i.code,{children:"file-storage-api"})," as your downstream storage"]})," - this is for generated files by the API (like reports)."]}),"\n"]}),"\n",(0,t.jsx)(i.admonition,{type:"caution",children:(0,t.jsx)(i.p,{children:"Will there there be a use case where interface other than REST needs to be supported?"})}),"\n",(0,t.jsx)(i.h3,{id:"notes-to-consider",children:"Notes to consider:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["This ",(0,t.jsx)(i.code,{children:"API"})," only acts as a RESTful interface to your ",(0,t.jsx)(i.code,{children:"File Storage"}),". As per ",(0,t.jsx)(i.code,{children:"SOLID"}),"' ",(0,t.jsx)(i.code,{children:"Open for extension, closed for modification'"}),"s principle. As for the case of large files (which I hope I will never do), do a separate microservice ecosystem where you can implement a microservice flow for queue-ing the upload of large files. (or by chunking them to pieces)."]}),"\n"]}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsx)(i.p,{children:"This is a good research idea especially for that dumb fuck SVI's GenRet"})})]})}function h(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},6368:(e,i,o)=>{o.d(i,{Z:()=>t});const t=o.p+"assets/images/file-storage-api diagram-217a6c3a3e22dcc2a9a5a6328bd8c7c6.png"},1151:(e,i,o)=>{o.d(i,{Z:()=>a,a:()=>r});var t=o(7294);const n={},s=t.createContext(n);function r(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);